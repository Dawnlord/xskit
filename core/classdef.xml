<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE classdef SYSTEM "doc/classdef.dtd">

<classdef>
	<comment>
		Through XSKit API, developers can use multiple languages (including C ++, JavaScript) to develop cross-platform applications.
	</comment>

	<class name="Object" xtag="object">
		<comment>Object class is the basis for the prototype of all objects, objects of other types are inherited from the object</comment>

		<property name="prototype" type="string">
			<comment>prototype of object</comment>
		</property>

		<property name="id" type="string">
			<comment>Statically defined object ID, as the identification of the object is referenced, unique in scope. When the object does not have to be a reference, you don not need to specify the object ID.
			</comment>
		</property>
		
		<property name="elements" type="array">
			<comment>sub Object List</comment>
		</property>

		<method name="getElementById">
			<comment>Obtain child objects of the specified id。</comment>
			<param name="id" type="string">
				<comment>specified id of the object</comment>
			</param>
			<return type="Object">
				<comment>Specified object, return a null value if  finding Object failed.</comment>
			</return>
		</method>
	</class>

	<class name="Manifest" xtag="manifest" inherit="Object">
		<comment>Listing properties of the application package.
		</comment>
		
		<property name="id" type="string">
			<comment>ANSI string expression that uniquely identifies the application，for example：org.xskit.FirstApp.</comment>
		</property>
		
		<property name="uuid" type="string">
			<comment>UUID string that uniquely identifies the application.</comment>
		</property>
		
		<property name="name" type="text">
			<comment>Text string that expresses application name</comment>
		</property>
		
		<property name="mode" type="enum" enum="gui:0; console:1; service:2;">
			<comment>Specify the application operating mode. The default is gui mode.</comment>
		</property>
		
		<property name="orient" type="enum" enum="default:0; landscape:1; portrait:2;">
			<comment>Specify the application initial screen orientation. Only if mode = gui, this property is valid. default indicates that no specified.</comment>
		</property>
		
		<property name="preload" type="string">
		  <comment>Specify  necessary dynamic library before start,the value does not include an extension of the dynamic library file name. If the script is stored in a subdirectory under lib directory, you need a relative path with respect to the lib directory contains.</comment>
		</property>

		<property name="startup" type="string">
		  <comment>JavaScript script specified to run at startup, the value for the script file name without the extension. If the scripts are kept in a subdirectory under scripts directory, the relative path relative to the Scripts directory is required.</comment>
		</property>
	</class>
		
	<class name="CoreApplication" xtag="coreapplication" inherit="Object">
		<comment>The Application object prototype.Within the operational life cycle of an application, the framework creates a global object called app, the prototype is CoreApplication or its derived classes.
		</comment>

		<method name="trace" static="true">
			<comment>In the debug console output debug information.</comment>
			<param name="text" type="text">
				<comment>debug information</comment>
			</param>
		</method>
		
		<method name="exit">
			<comment>exit the application</comment>
		</method>
		
		<method name="setTimeout">
			<comment>Set the specified delay time function to be executed</comment>
			<param name="functionName" type="string">
				<comment>at the end of the delay, the name of the function to be executed</comment>
			</param>
			<param name="millisecond" type="int">
				<comment>The length of the delay, measured in milliseconds.</comment>
			</param>
			<return type="int">
				<comment>Timer ID that can be used as parameters of the clearTimeout</comment>
			</return>
		</method>
		
		<method name="clearTimeout">
			<comment>Clear the Delay function has been set。</comment>
			<param name="timerId" type="int">
				<comment>setTimeout function returns the ID</comment>
			</param>
		</method>

		<method name="launchApp" static="true">
			<comment>run the specified App</comment>
			<param name="appId" type="string">
				<comment>The only App ID.</comment>
			</param>
			<return type="boolean">
				<comment>On success returns True, otherwise returns False</comment>
			</return>
		</method>
		
		<method name="invoke">
			<comment>call the remote object's default method, asynchronous call.</comment>
			<param name="uri" type="string">
				<comment>URI of the remote object</comment>
			</param>
			<param name="callback" type="string">
				<comment>The callback function is called after the end of call</comment>
			</param>
			<return type="Remote">
				<comment>Remote invocation interface object.</comment>
			</return>
		</method>
	</class>

	<class name="Remote" xtag="remote" inherit="Object">
		<comment>Remote invocation interface object.Users can access the remote object interfaces provided by that object,all visits are running asynchronously invoke the specified callback function after the end of the run.
		</comment>

		<property name="uri" type="string">
			<comment>URI of the remote object, URI form consistent with the data source.</comment>
		</property>
	</class>
	
	<class name="Shape" xtag="shape" inherit="Object">
		<comment>Base class for Basic graphics objects.</comment>
	</class>
	
	<class name="Line" xtag="line" inherit="Shape">
		<comment>line object</comment>
	</class>
	
	<class name="Rectangle" xtag="rectangle" inherit="Shape">
		<comment>rectangle object</comment>
	</class>
	
	<class name="Arc" xtag="arc" inherit="Shape">
		<comment>arc object</comment>
	</class>
	
	<class name="BezierCurve" xtag="beziercurve" inherit="Shape">
		<comment>Bezier object</comment>
	</class>
	
	<class name="Gradient" xtag="gradient" inherit="Object">
		<comment>gradient color object</comment>
		<method name="addColorStop">
			<comment>Specify gradient color and stop of the gradient object. </comment>
			<param name="stop" type="float">
				<comment>A value between 0.0 and 1.0, that represents the position between the beginning and end of the ramp. </comment>
			</param>
			<param name="color" type="string">
				<comment>CSS color value at the end of the displayed location.</comment>
			</param>
		</method>
	</class>
	
	<class name="CanvasContext" xtag="canvascontext" inherit="Object">
		<comment>graphics context object, providing method to draw basic graphics, text, and image.</comment>

		<property name="lineWidth" type="float">
			<comment>set or return the current line width</comment>
		</property>
		
		<property name="strokeColor" type="object">
			<comment>Set or return the color for stroke, supprot style like "#000000" only now</comment>
		</property>
		
		<property name="fillColor" type="object">	
			<comment>Set or return the color used to fill the painting, supprot style like "#000000" only now</comment>
		</property>
		
		<property name="font" type="object">
			<comment>font for text</comment>
		</property>
		
		<property name="textAlign" type="xsTextAlign" enum="start 0; end:1; left:2, center:3, right:4;">
			<comment>Specifies the alignment of a text string relative to its layout rectangle .</comment>
		</property>
		
		<property name="textBaseline" type="xsTextBaseline" enum="alphabetic 0; top:1; hang:2, middle:3, ideographic:4; bottom:5">
			<comment>Text baseline alignment</comment>
		</property>
				
		<method name="moveTo">
			<comment>To move the path to the specified point in the canvas, not create a line</comment>
			<param name="x" type="float">
				<comment>x-coordinate of the specified point </comment>
			</param>
			<param name="y" type="float">
				<comment>y-coordinate of the specified point</comment>
			</param>
		</method>
		
		<method name="lineTo">
			<comment>Add a new point, and then create a line from that point to the last specified point in canvas.</comment>
			<param name="x" type="float">
				<comment>x-coordinate of the new point </comment>
			</param>
			<param name="y" type="float">
				<comment>x-coordinate of the new point </comment>
			</param>
		</method>
		
		<method name="stroke">
			<comment>Draw a defined path.</comment>
		</method> 
		
		<method name="fill">
			<comment>Filling the current drawing (path).</comment>
		</method> 
		
		<method name="rect">
			<comment>Create a rectangle</comment>
			<param name="x" type="float">
				<comment>x-coordinate of the upper left corner of the rectangle</comment>
			</param>
			<param name="y" type="float">
				<comment>y-coordinate of the upper left corner of the rectangle</comment>
			</param>
			<param name="width" type="float">
				<comment>Width of the rectangle</comment>
			</param>
			<param name="height" type="float">
				<comment>Height of the rectangle</comment>
			</param>
		</method> 
		
		<method name="fillRect">
			<comment>Drawing " filled " rectangle.</comment>
			<param name="x" type="float">
				<comment>x-coordinate of the upper left corner of the rectangle</comment>
			</param>
			<param name="y" type="float">
				<comment>y-coordinate of the upper left corner of the rectangle</comment>
			</param>
			<param name="width" type="float">
				<comment>Width of the rectangle</comment>
			</param>
			<param name="height" type="float">
				<comment>Height of the rectangle</comment>
			</param>
		</method> 
		
		<method name="strokeRect">
			<comment>Draws a rectangle ( no fill ).</comment>
			<param name="x" type="float">
				<comment>x-coordinate of the upper left corner of the rectangle</comment>
			</param>
			<param name="y" type="float">
				<comment>y-coordinate of the upper left corner of the rectangle</comment>
			</param>
			<param name="width" type="float">
				<comment>Width of the rectangle</comment>
			</param>
			<param name="height" type="float">
				<comment>Height of the rectangle</comment>
			</param>
		</method> 
		
		<method name="clearRect">
			<comment>Clear the specified pixels within the given rectangle.</comment>
			<param name="x" type="float">
				<comment>x-coordinate of the upper left corner of the rectangle</comment>
			</param>
			<param name="y" type="float">
				<comment>y-coordinate of the upper left corner of the rectangle</comment>
			</param>
			<param name="width" type="float">
				<comment>Width of the rectangle</comment>
			</param>
			<param name="height" type="float">
				<comment>Height of the rectangle</comment>
			</param>
		</method> 
		
		<method name="arc">
			<comment>Create an arc / curve ( used to create a circle or round ).</comment>
			<param name="x" type="float">
				<comment>x-coordinate of center of the circle.</comment>
			</param>
			<param name="y" type="float">
				<comment>y-coordinate of center of the circle.</comment>
			</param>
			<param name="radius" type="float">
				<comment>Arc radius</comment>
			</param>
			<param name="starAngle" type="float">
				<comment>Start angle, in radians. (Circular arc three o'clock position is 0 degrees).</comment>
			</param>
			<param name="endAngle" type="float">
				<comment>End angle, in radians.</comment>
			</param>
			<param name="anticlockwise" type="boolean">
				<comment>Whether counterclockwise (default false)</comment>
			</param>
		</method> 
		
		<method name="arcTo">
			<comment>Create arc / curve between two tangents.Unimplemented now.</comment>
			<param name="x1" type="float">
				<comment>X-coordinate of the starting point of the arc</comment>
			</param>
			<param name="y1" type="float">
				<comment>Y-coordinate of the starting point of the arc</comment>
			</param>
			<param name="x2" type="float">
				<comment>X-coordinate of the arc end point</comment>
			</param>
			<param name="y2" type="float">
				<comment>y-coordinate of the arc end point.</comment>
			</param>
			<param name="radius" type="float">
				<comment>Radius of the arc.</comment>
			</param>
		</method> 
		
		<method name="beginPath">
			<comment>Start a path, or reset the current path</comment>
		</method> 
		
		<method name="closePath">
			<comment>Create a path from the current point back to the starting point of the path.</comment>
		</method> 
		
		<method name="bezierCurveTo">
			<comment>Create a cubic Bezier curve.Unimplemented on MTK.</comment>
			<param name="cp1x" type="float">
				<comment>X-coordinate of the first control point of Bezier</comment>
			</param>
			<param name="cp1y" type="float">
				<comment>Y-coordinate of the first control point of Bezier</comment>
			</param>
			<param name="cp2x" type="float">
				<comment>X-coordinate of the second control point of Bezier</comment>
			</param>
			<param name="cp2y" type="float">
				<comment>Y-coordinate of the second control point of Bezier</comment>
			</param>
			<param name="x" type="float">
				<comment>X-coordinate of the end point</comment>
			</param>
			<param name="y" type="float">
				<comment>Y-coordinate of the end point</comment>
			</param>
		</method> 
		
		<method name="quadraticCurveTo">
			<comment>Create a quadratic Bezier curve.Unimplemented on linux,win32 and MTK.</comment>
			<param name="qcpx" type="float">
				<comment>X-coordinate of Bezier control points</comment>
			</param>
			<param name="qcpxy" type="float">
				<comment>Y-coordinate of Bezier control points</comment>
			</param>
			<param name="qx" type="float">
				<comment>X-coordinate of the end point</comment>
			</param>
			<param name="qy" type="float">
				<comment>Y-coordinate of the end point</comment>
			</param>
		</method> 
		
		<method name="translate">
			<comment>Remapping (0,0) position on the canvas.</comment>
			<param name="x" type="float">
				<comment>Value added to the horizontal coordinate (x).</comment>
			</param>
			<param name="y" type="float">
				<comment>Value added to the vertical coordinate (y)</comment>
			</param>
		</method> 
		
		<method name="scale">
			<comment>Zoom the current drawing to a larger or smaller.Unimplemented on MTK.</comment>
			<param name="scalewidth" type="float">
				<comment>Scaling the current drawing width (1 = 100%, 0.5 = 50%, 2 = 200%, and so on)</comment>
			</param>
			<param name="scaleheight" type="float">
				<comment>Scaling the current drawing height (1 = 100%, 0.5 = 50%, 2 = 200%, and so on)</comment>
			</param>
		</method> 

		<method name="rotate">
			<comment>Rotate the current drawing.Unimplemented on MTK.</comment>
			<param name="angle" type="float">
				<comment>Rotation angle (in radians)</comment>
			</param>
		</method> 
		
		<method name="transform">
			<comment>Replace the current transformation matrix of drawing.Unimplemented on MTK.</comment>
			<param name="xx" type="float">
				<comment>Horizontal scale</comment>
			</param>
			<param name="yx" type="float">
				<comment>Horizontal tilt </comment>
			</param>
			<param name="xy" type="float">
				<comment>Vertical tilt</comment>
			</param>
			<param name="yy" type="float">
				<comment>Vertical scale</comment>
			</param>
			<param name="x0" type="float">
				<comment>Horizontal movement</comment>
			</param>
			<param name="y0" type="float">
				<comment>Vertical movement</comment>
			</param>
		</method> 
		
		<method name="isPointInPath">
			<comment>If the specified point  is in the current path, then return true, otherwise returns false.Unimplemented now.</comment>
			<param name="x" type="float">
				<comment>X-coordinate of the test point)</comment>
			</param>
			<param name="y" type="float">
				<comment>Y-coordinate of the test point</comment>
			</param>
		</method> 
		
		<method name="drawImage">
			<comment>Draw the image to the canvas.</comment>
			<param name="image" type="object">
				<comment>Predetermined image you want to use.</comment>
			</param>
			<param name="sx" type="float">
				<comment>Alternatively, x-coordinate began to cut.</comment>
			</param>
			<param name="sy" type="float">
				<comment>Alternatively, y-coordinate began to cut.</comment>
			</param>
			<param name="swidth" type="float">
				<comment>Alternatively, the width of the cutted image.</comment>
			</param>
			<param name="sheight" type="float">
				<comment>Alternatively, the height of the cutted image.</comment>
			</param>
			<param name="x" type="float">
				<comment>X-coordinate of the point to place the image</comment>
			</param>
			<param name="y" type="float">
				<comment>Y-coordinate of the point to place the image</comment>
			</param>
			<param name="width" type="float">
				<comment>Alternatively, the width of the image you want to use.</comment>
			</param>
			<param name="height" type="float">
				<comment>Alternatively, the height of the image you want to use.</comment>
			</param>
		</method> 
		
		<method name="clip">
			<comment>Cut any shape and size from the original canvas area.Unimplemented now.</comment>
		</method> 
		
		<method name="fillText">
			<comment> Draw  "filled" text on the canvas.</comment>
			<param name="text" type="text">
				<comment>Setting the output text on the canvas.</comment>
			</param>
			<param name="count" type="int">
				<comment>The number of characters to be displayed.</comment>
			</param>
			<param name="x" type="float">
				<comment>Start drawing text x-coordinate position (relative to the canvas).</comment>
			</param>
			<param name="y" type="float">
				<comment>Start drawing text y-coordinate position (relative to the canvas)</comment>
			</param>
			<param name="maxWidth" type="int">
				<comment>Alternatively, the maximum allowable text width, in pixels.</comment>
			</param>
		</method> 
		
		<method name="strokeText">
			<comment> Draw text on the canvas (no filling).</comment>
			<param name="text" type="text">
				<comment>Setting the output text on the canvas.</comment>
			</param>
			<param name="count" type="int">
				<comment>The number of characters to be displayed.</comment>
			</param>
			<param name="x" type="float">
				<comment>Start drawing text x-coordinate position (relative to the canvas).</comment>
			</param>
			<param name="y" type="float">
				<comment>Start drawing text y-coordinate position (relative to the canvas).</comment>
			</param>
			<param name="maxWidth" type="int">
				<comment>Alternatively, the maximum allowable text width, in pixels.</comment>
			</param>
		</method> 
		
		<method name="measureText">
			<comment>Return contains an object that contains the specified font size of the text in pixels.</comment>
			<param name="text" type="text">
				<comment>text to be measured</comment>
			</param>
			<return type="object">
				<comment>Return a data contains the width and height of the text </comment>
			</return>
		</method> 
		
		<method name="save">
			<comment>Save the current state and properties of the environment.</comment>
		</method> 
		
		<method name="restore">
			<comment>Return the path previously saved state and properties.</comment>
		</method> 
	</class>
	
	<class name="Canvas" xtag="canvas" inherit="Object">
		<comment>drawing canvas object</comment>
		<method name="getContext">
			<comment>Get the graphics context.</comment>
			<return type="CanvasContext">
				<comment>the graphics context </comment>
			</return>
		</method>
	</class>

</classdef>
