<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE classdef SYSTEM "doc/classdef.dtd">

<classdef>
	<comment>
		XSKit API让开发者可以使用多种语言（包括C++、JavaScript）来开发跨平台的应用程序。
	</comment>

	<class name="Object" xtag="object">
		<comment>Object是所有对象的基础原型，其他类型的对象均由Object继承而来。</comment>

		<property name="prototype" type="string">
			<comment>对象的原型</comment>
		</property>

		<property name="id" type="string">
			<comment>静态定义的对象ID，作为对象被引用时的标识，在作用域内唯一。当对象无需被引用时，可以不指定对象的ID。
			</comment>
		</property>
		
		<property name="elements" type="array">
			<comment>子Object列表</comment>
		</property>

		<method name="getElementById">
			<comment>获得指定id的子对象。</comment>
			<param name="name" type="string">
				<comment>指定对象的Id</comment>
			</param>
			<return type="Object">
				<comment>指定的对象。查找对象失败则返回空值。</comment>
			</return>
		</method>
	</class>

	<class name="Manifest" xtag="manifest" inherit="Object">
		<comment>应用程序包的属性清单。
		</comment>
		
		<property name="id" type="string">
			<comment>表达应用程序唯一标识的ANSI字符串，例如：org.xskit.FirstApp</comment>
		</property>
		
		<property name="uuid" type="string">
			<comment>应用程序唯一标识的UUID字符串</comment>
		</property>
		
		<property name="name" type="text">
			<comment>表达应用程序名称的文本串</comment>
		</property>
		
		<property name="mode" type="enum" enum="gui:0; console:1; service:2;">
			<comment>指定应用程序的运行模式。默认为gui模式。</comment>
		</property>
		
		<property name="orient" type="enum" enum="default:0; landscape:1; portrait:2;">
			<comment>指定应用程序初始的屏幕朝向。仅当mode=gui时，该属性才有效。default表示无需特别指定，</comment>
		</property>
		
		<property name="preload" type="string">
		  <comment>指定启动前必须载入的动态库，取值为不包含扩展名的动态库文件名。若脚本存放于lib目录下的子目录中，需要包含相对于lib目录的相对路径。</comment>
		</property>

		<property name="startup" type="string">
		  <comment>指定启动时运行的JavaScript脚本，取值为不包含扩展名的脚本文件名称。若脚本存放于scripts目录下的子目录中，需要包含相对于scripts目录的相对路径。</comment>
		</property>
	</class>
		
	<class name="CoreApplication" xtag="coreapplication" inherit="Object">
		<comment>应用程序对象原型。在应用程序的运行生命周期内，由框架创建一个名为app的全局对象，原型即为CoreApplication或它的继承类。
		</comment>

		<method name="trace" static="true">
			<comment>在调试控制台上输出调试信息。</comment>
			<param name="text" type="text">
				<comment>调试信息</comment>
			</param>
		</method>
		
		<method name="exit">
			<comment>退出应用程序。</comment>
		</method>
		
		<method name="setTimeout">
			<comment>设置延时执行指定的函数。</comment>
			<param name="functionName" type="string">
				<comment>延时结束时，将要执行的函数的名称</comment>
			</param>
			<param name="millisecond" type="int">
				<comment>延时的长度，以毫秒数计算。</comment>
			</param>
			<return type="int">
				<comment>已设置的Timer ID，可用作clearTimeout的参数</comment>
			</return>
		</method>
		
		<method name="clearTimeout">
			<comment>清除已设置的延时函数。</comment>
			<param name="timerId" type="int">
				<comment>setTimeout返回的ID</comment>
			</param>
		</method>

		<method name="launchApp" static="true">
			<comment>运行指定的App</comment>
			<param name="appId" type="string">
				<comment>App的唯一ID</comment>
			</param>
			<return type="boolean">
				<comment>成功返回True，否则返回False</comment>
			</return>
		</method>
		
		<method name="invoke">
			<comment>调用远程对象的默认方法。异步调用</comment>
			<param name="uri" type="string">
				<comment>远程对象的URI</comment>
			</param>
			<param name="callback" type="string">
				<comment>调用结束后将被调用的回调函数</comment>
			</param>
			<return type="Remote">
				<comment>远程调用接口对象</comment>
			</return>
		</method>
	</class>

	<class name="Remote" xtag="remote" inherit="Object">
		<comment>远程调用接口对象。用户可以通过该对象访问远程对象提供的接口，所有的访问均以异步方式运行，运行结束后调用指定的回调函数。
		</comment>

		<property name="uri" type="string">
			<comment>远程对象的URI。与数据源的URI形式一致</comment>
		</property>
	</class>
	
	<class name="Canvas" xtag="canvas" inherit="Object">
		<comment>绘图画布。</comment>
		<method name="getContext">
			<comment>获得画布的绘图上下文</comment>
			<return type="CanvasContext">
				<comment>画布的绘图上下文</comment>
			</return>
		</method>
	</class>
	
	<class name="Shape" xtag="shape" inherit="Object">
		<comment>基本图形对象的基类</comment>
	</class>
	
	<class name="Line" xtag="line" inherit="Shape">
		<comment>线段对象</comment>
	</class>
	
	<class name="Rectangle" xtag="rectangle" inherit="Shape">
		<comment>矩形对象</comment>
	</class>
	
	<class name="Arc" xtag="arc" inherit="Shape">
		<comment>弧形对象</comment>
	</class>
	
	<class name="BezierCurve" xtag="beziercurve" inherit="Shape">
		<comment>曲线对象</comment>
	</class>
	
	<class name="CanvasContext" xtag="canvascontext" inherit="Object">
		<comment>画布的绘图上下文。</comment>

		<property name="lineWidth" type="float">
			<comment>线条粗细</comment>
		</property>
		
		<property name="strokeColor" type="xsColor">
			<comment>边线的颜色</comment>
		</property>
		
		<property name="fillColor" type="xsColor">	
			<comment>边线的颜色</comment>
		</property>
		
		<property name="font" type="xsFontType">
			<comment>字体格式</comment>
		</property>
		
		<property name="textAlign" type="xsTextAlign" enum="start 0; end:1; left:2, center:3, right:4;">
			<comment>字体对齐方式</comment>
		</property>
		
		<property name="textBaseline" type="xsTextBaseline" enum="alphabetic 0; top:1; hang:2, middle:3, ideographic:4; bottom:5">
			<comment>字体对齐方式</comment>
		</property>
		
		<!--<method name="clear">
			<comment>清空整个画布</comment>
		</method>-->
		
		<method name="moveTo">
			<comment>移动当前位置到指定的坐标</comment>
			<param name="x" type="float">
				<comment>X坐标</comment>
			</param>
			<param name="y" type="float">
				<comment>Y坐标</comment>
			</param>
		</method>
		
		<method name="lineTo">
			<comment>从当前位置绘制线段到指定坐标</comment>
			<param name="x" type="float">
				<comment>X坐标</comment>
			</param>
			<param name="y" type="float">
				<comment>Y坐标</comment>
			</param>
		</method>
		
		<method name="stroke">
			<comment>画出画笔路径</comment>
		</method> 
		
		<method name="fill">
			<comment>填充画笔路径</comment>
		</method> 
		
		<method name="rect">
			<comment>在画图路径中加入矩形</comment>
			<param name="x" type="float">
				<comment>矩形左上角的 x 坐标</comment>
			</param>
			<param name="y" type="float">
				<comment>矩形左上角的 y 坐标</comment>
			</param>
			<param name="width" type="float">
				<comment>矩形的宽度</comment>
			</param>
			<param name="height" type="float">
				<comment>矩形高度</comment>
			</param>
		</method> 
		
		<method name="fillRect">
			<comment>绘制填充矩形</comment>
			<param name="x" type="float">
				<comment>矩形左上角的 x 坐标</comment>
			</param>
			<param name="y" type="float">
				<comment>矩形左上角的 y 坐标</comment>
			</param>
			<param name="width" type="float">
				<comment>矩形的宽度</comment>
			</param>
			<param name="height" type="float">
				<comment>矩形高度</comment>
			</param>
		</method> 
		
		<method name="strokeRect">
			<comment>绘制矩形(无填充)</comment>
			<param name="x" type="float">
				<comment>矩形左上角的 x 坐标</comment>
			</param>
			<param name="y" type="float">
				<comment>矩形左上角的 y 坐标</comment>
			</param>
			<param name="width" type="float">
				<comment>矩形的宽度</comment>
			</param>
			<param name="height" type="float">
				<comment>矩形高度</comment>
			</param>
		</method> 
		
		<method name="clearRect">
			<comment>在给定的矩形内清除指定的像素</comment>
			<param name="x" type="float">
				<comment>矩形左上角的 x 坐标</comment>
			</param>
			<param name="y" type="float">
				<comment>矩形左上角的 y 坐标</comment>
			</param>
			<param name="width" type="float">
				<comment>矩形的宽度</comment>
			</param>
			<param name="height" type="float">
				<comment>矩形高度</comment>
			</param>
		</method> 
		
		<method name="arc">
			<comment>在给定的矩形内清除指定的像素</comment>
			<param name="x" type="float">
				<comment>弧形的 x 坐标</comment>
			</param>
			<param name="y" type="float">
				<comment>弧形的 y 坐标</comment>
			</param>
			<param name="radius" type="float">
				<comment>弧形的半径</comment>
			</param>
			<param name="starAngle" type="float">
				<comment>开始角度</comment>
			</param>
			<param name="endAngle" type="float">
				<comment>结束角度</comment>
			</param>
			<param name="anticlockwise" type="boolean">
				<comment>是否逆时针(默认false)</comment>
			</param>
		</method> 
		
		<method name="arcTo">
			<comment>过两点画指定半径的切线</comment>
			<param name="x1" type="float">
				<comment>切线起点的x坐标</comment>
			</param>
			<param name="y1" type="float">
				<comment>切线起点的 y 坐标</comment>
			</param>
			<param name="x2" type="float">
				<comment>切线终点的x坐标</comment>
			</param>
			<param name="y2" type="float">
				<comment>切线终点的y坐标</comment>
			</param>
			<param name="radius" type="float">
				<comment>切线所在圆的半径</comment>
			</param>
		</method> 
		
		<method name="beginPath">
			<comment>起始一条路径，或重置当前路径</comment>
		</method> 
		
		<method name="closePath">
			<comment>创建从当前点回到起始点的路径</comment>
		</method> 
		
		<method name="bezierCurveTo">
			<comment>画三次贝赛尔曲线</comment>
			<param name="cp1x" type="float">
				<comment> 	第一个贝塞尔控制点的 x 坐标</comment>
			</param>
			<param name="cp1y" type="float">
				<comment>第一个贝塞尔控制点的 y 坐标</comment>
			</param>
			<param name="cp2x" type="float">
				<comment>第二个贝塞尔控制点的 x 坐标</comment>
			</param>
			<param name="cp2y" type="float">
				<comment>第二个贝塞尔控制点的 y 坐标</comment>
			</param>
			<param name="x" type="float">
				<comment>结束点的 x 坐标</comment>
			</param>
			<param name="y" type="float">
				<comment>结束点的 y 坐标</comment>
			</param>
		</method> 
		
		<method name="quadraticCurveTo">
			<comment>画二次贝赛尔曲线</comment>
			<param name="qcpx" type="float">
				<comment>贝塞尔控制点的 x 坐标</comment>
			</param>
			<param name="qcpxy" type="float">
				<comment>贝塞尔控制点的 y 坐标</comment>
			</param>
			<param name="qx" type="float">
				<comment>结束点的 x 坐标</comment>
			</param>
			<param name="qy" type="float">
				<comment>结束点的 y 坐标</comment>
			</param>
		</method> 
		
		<method name="translate">
			<comment>重新映射画布上的 (0,0) 位置</comment>
			<param name="x" type="float">
				<comment>添加到水平坐标（x）上的值</comment>
			</param>
			<param name="y" type="float">
				<comment>添加到垂直坐标（y）上的值</comment>
			</param>
		</method> 
		
		<method name="scale">
			<comment>缩放当前绘图至更大或更小</comment>
			<param name="scalewidth" type="float">
				<comment>缩放当前绘图的宽度 (1=100%, 0.5=50%, 2=200%, 依次类推)</comment>
			</param>
			<param name="scaleheight" type="float">
				<comment>缩放当前绘图的高度 (1=100%, 0.5=50%, 2=200%, etc.)</comment>
			</param>
		</method> 

		<method name="rotate">
			<comment>旋转当前绘图</comment>
			<param name="angle" type="float">
				<comment>旋转角度(以弧度计)</comment>
			</param>
		</method> 
		
		<method name="isPointInPath">
			<comment>判断点是否被路径包含</comment>
			<param name="x" type="float">
				<comment>判断点的 x 坐标)</comment>
			</param>
			<param name="y" type="float">
				<comment>判断点的 y 坐标</comment>
			</param>
		</method> 
		
		<method name="drawImage">
			<comment>绘制图像到画布上</comment>
			<param name="image" type="xsImage">
				<comment>规定钥匙用的图像</comment>
			</param>
			<param name="sx" type="float">
				<comment>可选，开始剪切的 x 坐标</comment>
			</param>
			<param name="sy" type="float">
				<comment>可选，开始剪切的 y 坐标</comment>
			</param>
			<param name="swidth" type="float">
				<comment>可选，被剪切图像的宽度</comment>
			</param>
			<param name="sheight" type="float">
				<comment>可选，被剪切图像的高度</comment>
			</param>
			<param name="x" type="float">
				<comment>在画布上放置图像的 x 坐标</comment>
			</param>
			<param name="y" type="float">
				<comment>在画布上放置图像的 y 坐标</comment>
			</param>
			<param name="width" type="float">
				<comment>可选，要使用的图像的宽度</comment>
			</param>
			<param name="height" type="float">
				<comment>可选，要使用的图像的高度</comment>
			</param>
		</method> 
		
		<method name="clip">
			<comment>从原始画布剪切任意形状和尺寸的区域</comment>
		</method> 
		
		<method name="fillText">
			<comment> 在画布上绘制“被填充的”文本</comment>
			<param name="text" type="text">
				<comment>规定在画布上输出的文本</comment>
			</param>
			<param name="x" type="float">
				<comment>开始绘制文本的 x 坐标位置（相对于画布）</comment>
			</param>
			<param name="y" type="float">
				<comment>开始绘制文本的 y 坐标位置（相对于画布）</comment>
			</param>
			<param name="maxWidth" type="int">
				<comment>可选。允许的最大文本宽度，以像素计</comment>
			</param>
		</method> 
		
		<method name="strokeText">
			<comment> 在画布上绘制文本（没有填色）</comment>
			<param name="text" type="text">
				<comment>规定在画布上输出的文本</comment>
			</param>
			<param name="x" type="float">
				<comment>开始绘制文本的 x 坐标位置（相对于画布）</comment>
			</param>
			<param name="y" type="float">
				<comment>开始绘制文本的 y 坐标位置（相对于画布）</comment>
			</param>
			<param name="maxWidth" type="int">
				<comment>可选。允许的最大文本宽度，以像素计</comment>
			</param>
		</method> 
		
		<method name="measureText">
			<comment>返回包含一个对象，该对象包含以像素计的指定字体宽度</comment>
			<param name="text" type="text">
				<comment>要测量的文本</comment>
			</param>
		</method> 
		
		<method name="save">
			<comment>保存当前环境的状态</comment>
		</method> 
		
		<method name="restore">
			<comment>返回之前保存过的路径状态和属性</comment>
		</method> 
	</class>

</classdef>
